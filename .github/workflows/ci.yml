name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install -g @n8n/cli
        npm install -g eslint
        npm install -g prettier
        npm install -g yaml-validator

    - name: Validate JSON files
      run: |
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" | xargs -I {} sh -c 'echo "Validating {}" && cat {} | jq .'

    - name: Validate YAML files
      run: |
        find . -name "*.yml" -o -name "*.yaml" -not -path "./node_modules/*" -not -path "./.git/*" | xargs yaml-validator

    - name: Lint JavaScript files
      run: |
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | xargs eslint --ext .js

    - name: Validate n8n workflows
      run: |
        for workflow in workflows/*.json; do
          if [ -f "$workflow" ]; then
            echo "Validating n8n workflow: $workflow"
            # Basic JSON validation is already done above
            # Additional n8n-specific validation can be added here
          fi
        done

    - name: Validate Kubernetes manifests
      uses: instrumenta/kubeval-action@master
      with:
        files: k8s/

    - name: Validate Docker files
      run: |
        docker run --rm -i hadolint/hadolint < docker/Dockerfile.n8n
        docker run --rm -i hadolint/hadolint < docker/Dockerfile.redis
        docker run --rm -i hadolint/hadolint < docker/Dockerfile.postgres

    - name: Terraform format check
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Check Terraform formatting
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Validate Terraform
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-validate
    strategy:
      matrix:
        service: [n8n, redis, postgres]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: docker
        file: docker/Dockerfile.${{ matrix.service }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }} --version || true

  test-workflows:
    name: Test n8n Workflows
    runs-on: ubuntu-latest
    needs: lint-and-validate
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: n8n_test
          POSTGRES_USER: n8n_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install test dependencies
      run: |
        npm install -g jest
        npm install -g axios
        npm install -g @n8n/cli

    - name: Run workflow tests
      run: |
        if [ -f "tests/workflow.test.js" ]; then
          cd tests
          node workflow.test.js
        fi
      env:
        DB_POSTGRESDB_HOST: localhost
        DB_POSTGRESDB_PORT: 5432
        DB_POSTGRESDB_DATABASE: n8n_test
        DB_POSTGRESDB_USER: n8n_test
        DB_POSTGRESDB_PASSWORD: test_password
        QUEUE_BULL_REDIS_HOST: localhost
        QUEUE_BULL_REDIS_PORT: 6379

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test, test-workflows]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        cd docker
        docker-compose up -d
        sleep 30

    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until docker-compose -f docker/docker-compose.yml ps | grep healthy; do sleep 5; done'

    - name: Run integration tests
      run: |
        # Test n8n API endpoint
        curl -f http://localhost:5678/healthz || exit 1
        
        # Test webhook endpoint
        curl -f -X POST http://localhost:5678/webhook/test || exit 1
        
        # Test database connectivity
        docker-compose -f docker/docker-compose.yml exec -T postgres pg_isready -U n8n -d n8n || exit 1
        
        # Test Redis connectivity
        docker-compose -f docker/docker-compose.yml exec -T redis redis-cli ping || exit 1

    - name: Cleanup
      if: always()
      run: |
        cd docker
        docker-compose down -v

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Plan
      run: |
        cd terraform
        terraform init
        terraform plan -var="environment=staging"

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Plan
      run: |
        cd terraform
        terraform init
        terraform plan -var="environment=production"

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "Deployment completed successfully!"
        # Add notification logic here (Slack, Teams, etc.)

    - name: Notify on failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "Deployment failed!"
        # Add failure notification logic here